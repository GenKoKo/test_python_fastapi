name: CI/CD Pipeline

on:
    push:
        branches: [main, master, develop]
    pull_request:
        branches: [main, master, develop]
    # 手動觸發，用於 feature 分支測試
    workflow_dispatch:
        inputs:
            run_full_suite:
                description: "Run full test suite including Docker builds"
                required: false
                default: "false"
                type: boolean

permissions:
    contents: read
    security-events: write
    actions: write
    packages: write

env:
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{ github.repository }}

jobs:
    # 代碼品質檢查
    code-quality:
        runs-on: ubuntu-latest
        name: Code Quality Checks

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: "3.11"

            - name: Install uv
              uses: astral-sh/setup-uv@v4
              with:
                  version: "latest"

            - name: Install dependencies
              run: |
                  uv sync --dev

            - name: Code formatting check (Black)
              run: |
                  uv run black --check --diff src/ tests/ scripts/

            - name: Lint with flake8
              run: |
                  uv run flake8 src/ tests/ scripts/ --count --select=E9,F63,F7,F82 --show-source --statistics
                  uv run flake8 src/ tests/ scripts/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

            - name: Type checking with mypy
              run: |
                  uv run mypy src/ --ignore-missing-imports
              continue-on-error: true

    # 單元測試
    test:
        runs-on: ubuntu-latest
        name: Unit Tests
        needs: code-quality

        strategy:
            matrix:
                python-version: ["3.9", "3.10", "3.11"]

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ matrix.python-version }}

            - name: Install uv
              uses: astral-sh/setup-uv@v4
              with:
                  version: "latest"

            - name: Install dependencies
              run: |
                  uv sync --dev

            - name: Run tests with pytest
              run: |
                  uv run pytest tests/ -v --cov=src --cov-report=xml --cov-report=html

            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v3
              with:
                  file: ./coverage.xml
                  flags: unittests
                  name: codecov-umbrella
                  fail_ci_if_error: false

    # Docker 構建和測試
    docker-test:
        runs-on: ubuntu-latest
        name: Docker Build & Test
        needs: code-quality

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Build Docker image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  target: development
                  push: false
                  load: true
                  tags: fastapi-test:latest
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            - name: Run tests in Docker
              run: |
                  docker run --rm fastapi-test:latest uv run pytest tests/ -v

            - name: Test Docker Compose
              run: |
                  docker compose -f docker/docker-compose.yml --profile testing run --rm fastapi-test

    # 安全掃描
    security:
        runs-on: ubuntu-latest
        name: Security Scan
        permissions:
            security-events: write
            contents: read
            actions: read

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Run Trivy vulnerability scanner
              uses: aquasecurity/trivy-action@master
              with:
                  scan-type: "fs"
                  scan-ref: "."
                  format: "sarif"
                  output: "trivy-results.sarif"

            - name: Upload Trivy scan results to GitHub Security tab
              uses: github/codeql-action/upload-sarif@v3
              if: always()
              with:
                  sarif_file: "trivy-results.sarif"

    # 構建和推送 Docker 鏡像
    build-and-push:
        runs-on: ubuntu-latest
        name: Build & Push Docker Image
        needs: [test, docker-test]
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

        permissions:
            contents: read
            packages: write

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to Container Registry
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Extract metadata
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                  tags: |
                      type=ref,event=branch
                      type=ref,event=pr
                      type=sha,prefix={{branch}}-
                      type=raw,value=latest,enable={{is_default_branch}}

            - name: Build and push Docker image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  target: production
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

    # 部署到測試環境
    deploy-staging:
        runs-on: ubuntu-latest
        name: Deploy to Staging
        needs: build-and-push
        if: github.ref == 'refs/heads/develop'
        environment: staging

        steps:
            - name: Deploy to staging
              run: |
                  echo "🚀 Deploying to staging environment..."
                  # 這裡可以添加實際的部署腳本
                  echo "✅ Staging deployment completed"

    # 部署到生產環境
    deploy-production:
        runs-on: ubuntu-latest
        name: Deploy to Production
        needs: build-and-push
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        environment: production

        steps:
            - name: Deploy to production
              run: |
                  echo "🚀 Deploying to production environment..."
                  # 這裡可以添加實際的部署腳本
                  echo "✅ Production deployment completed"

    # 觸發 Codespaces 部署
    trigger-codespaces-deployment:
        runs-on: ubuntu-latest
        name: Trigger Codespaces Deployment
        needs: build-and-push
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        permissions:
            actions: write
            contents: read

        steps:
            - name: Trigger Codespaces CD workflow
              uses: actions/github-script@v7
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  script: |
                      const response = await github.rest.actions.createWorkflowDispatch({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        workflow_id: 'cd-codespaces.yml',
                        ref: 'main'
                      });
                      console.log('✅ Codespaces deployment workflow triggered');
                      console.log('🔗 Workflow run:', response.data);

    # 通知
    notify:
        runs-on: ubuntu-latest
        name: Notify Results
        needs: [test, docker-test, security]
        if: always()

        steps:
            - name: Notify success
              if: ${{ needs.test.result == 'success' && needs.docker-test.result == 'success' }}
              run: |
                  echo "✅ All tests passed successfully!"

            - name: Notify failure
              if: ${{ needs.test.result == 'failure' || needs.docker-test.result == 'failure' }}
              run: |
                  echo "❌ Some tests failed!"
                  exit 1
